<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
	<!--
		Spring 4 : XML로 클래스 등록 = 현재 실무 (유지보수)
		Spring 5 : XML, 자바로 등록 = 개발중
	 -->
	<aop:aspectj-autoproxy/> <!-- aop를 어노테이션으로 제작 -->
	<context:component-scan base-package="com.sist.*"/>
	<!-- component-scan : 선택적 메모리 할당 - 어노테이션 이용해서 등록
		@Component, => 일반 클래스
		@Repository, => DAO (저장소), 데이터베이스 연동하는 클래스
		@Service, => BI, DAO 여러개 통합
		@Controller, => 주로 처리, 화면변경(jsp명, .do)
		@RestController, => 자바스크립트 전송, JSON, 일반문자열 전송, Ajax, Vue, React, Kotlin, Flutter(Dart)
		@ControllerAdvice, => 모든 Controller의 예외처리 동시에 처리
		@Configuration => XML 대신 자바로 환경설정 가능
	-->
	
	<!--
		Spring MVC
		DispatcherServlet : 요청을 받는 서블릿
		 - HandlerMapping : 요청처리에 해당되는 메소드 호출
		   - @Controller
		   - @RequestMapping, @GetMapping, @PostMapping
		 - ViewResolver : 요청 처리 결과값을 JSP를 찾아서 전송
		   - 경로명, 확장자
	 -->
	 <bean id="viewResolver"
	 	class="org.springframework.web.servlet.view.InternalResourceViewResolver"
	 	p:prefix="/"
	 	p:suffix=".jsp"
	 />
	 <!-- 
	 	id="multipartResolver" => 스프링에서 사용하는 지정 ID
	  -->
	  <!-- 파일업로드시 사용 
	  <bean id="multipartResolver"
	 	class="org.springframework.web.multipart.commons.CommonsMultipartResolver"
	 />
	 -->
</beans>
